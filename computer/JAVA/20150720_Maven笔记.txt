1. Maven核心概念
坐标、依赖、仓库、生命周期、插件。

1. Maven工作目录
~/.m2
本地仓库：~/.m2/repository

1. 命名规范
groupId：域名反向.实际项目名，如 com.gopersist.bookstore
artifactId：实际项目名-模块名，如 bookstore-dao

2. 目录规范
src/main/java
src/main/resources
src/test/java
src/test/resources

2. 主要命令
mvn clean compile
mvn clean test
mvn clean package
mvn clean install

执行test前会执行compile，执行package前会先执行test，执行install前会先执行package。如果是打jar包，install会将jar复制到maven本地仓库，以便其他项目使用。

mvn clean deploy  将构件部署到远程仓库

4. 依赖范围(scope)
compile：默认，编译、测试、运行三种classpath都有效
test：编译及运行测试代码时有效，如junit
provided：编译和测试时有效，运行时无效，如servlet-api
runtime：测试和运行时有效，编译时无效，如jdbc驱动实现
system：与provided一致，但需要设定systemPath指定本机路径，可能造成不可移植
import：导入依赖范围

3. 编译插件
Maven默认只支持编译Java 1.3，需要配置下面的插件：
<project>
...
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.5</source>
          <target>1.5</target>
        </configuration>
      </plugin>
    </plugins>
  </build>
...
</project>

4. JUnit
JUnit3：需要测试的方法必须以test开头
JUnit4：需要测试的方法前增加@Test注解

5. 构件部署至私服
<project>
...
  <distributionManagement>
    <repository>
      <id>proj-releases</id>
      <name>Proj Release Repository</name>
      <url>http://192.168.1.100/content/repositories/proj-releases</url>
    </repository>
    <snapshotRepository>
      <id>proj-snapshots</id>
      <name>Proj Snapshot Repository</name>
      <url>http://192.168.1.100/content/repositories/proj-releases</url>
    </snapshotRepository>
  </distributionManagement>
...
</project>

部署构件时通常需要认证，即要在settings.xml中创建一个server元素，id与仓库的id匹配。

6. 关于对快照的依赖
同一个快照版本可能有很多打上不同时间戳的构件，不能有对外部构件的快照依赖，快照依赖只有在开发中模块之间和组织内部的依赖。
<snapshots>的<updatePolicy>应当设定为永远检查。

7. 配置镜像
./m2/settings.xml
<settings>
...
  <mirrors>
    <mirror>
      <id>maven.net.cn</id>
      <name>one of the central mirror in China</name>
      <url>http://maven.net.cn/content/groups/public/</url>
      <mirrorOf>central</mirrorOf>
    </mirror>
  </mirrors>
...
</settings>

设置默认中央库central的中国区镜像。

私服可以作为所有远程仓库的镜像，配置时将mirrorOf改为*

8. 三套生命周期
clean: pre-clean, clean, post-clean
default: validate, initialize, generate-sources, process-sources, generate-resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, process-test-classes, test, prepare-package, package, pre-integratiion-test, integration-test, post-integration-test, verify, install, deploy 
site: pre-site, site, post-site, site-deploy 只是建立方便团队交流的项目站点
 
三套生命周期之间互相独立，生命周期中的阶段后者依赖前者，也就是执行后者一定会执行前者。

8. 查看帮助
mvn help:describe -Dplugin=org.apache.maven.plugins:maven-war-plugin
mvn help:describe -Dplugin=org.apache.maven.plugins:maven-war-plugin -Ddetail

出自apache的插件列表：
http://maven.apache.org/plugins/index.html

9. 关于插件的说明
插件远程仓库的配置与依赖不同，配置为<pluginRepositories>，一般默认配置的即可，不需要特别设定。

pom中配置插件时，哪果groupId为org.apache.maven.plugins（官方插件），则可省略groupId，但不推荐。

10. spring加载的属性文件中可使用maven输出目录等变量

11. 聚合模块及父模块
maven聚合模块及父模块的packaging必须为pom，模块名、目录名应当和artifactId一致。

推荐使用dependencyManagement在父模块中定义依赖，在模块中仍然显式定义需要的依赖，但可省去version和scope，依赖管理用pluginManagement

聚合模块和父模块通常会整在一个文件中。

12. 裁剪反应堆

构建account-email及所有依赖模块
mvn clean install -pl account-email -am

13. 构建Web项目
packaging需为war，<finalName>account</finalName>方便部署。

14. 版本管理
将项目的快照版本更新至发布版本之后，再执行一次Maven构建，确保项目状态健康。然后将这一变更提交到版本控制系统的主干中，接着为当前主干的状态打上标签，以便日后查找。

15. 版本号
<主版本>.<次版本>.<增量版本>-<里程碑版本>
如：1.3.4-beta-2
增量版本和里程碑版本可以省略，通常带里程碑版本的都不太稳定。
如：1.3，1.3-alpha-1，1.3.4

16. 资源
为/src/main/resources中的属性文件开始过滤，以使类似${db.name}这样的值替换为maven中的属性值。
<resources>
  <resource>
    <directory>${project.basedir}/src/main/resources</directory>
    <filtering>true</filtering>
  </resource>
</resources>
<testResources>...

${project.basedir}/src/main/resources 相当于 src/main/resources

在Maven <profiles>中定义属性值，其中会有<id>dev</id>。

$ mvn clean install -Pdev 会激活dev中profile的设定。


