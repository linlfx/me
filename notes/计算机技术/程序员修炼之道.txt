===== 方向 =====
尽力熟悉广泛的技术和环境，以与各种新发展并肩前行。

使质量成为需求问题？

编程时不要过度修饰和过于求精，时刻提醒自己，抛弃完美主义。

你知道的不同的事情越多，你就越有价值。但作为底线，你需要知道你目前所用技术的各种特性。

每年学一种新语言，每季/月阅读一本技术书籍，寻找课程上，参加本地用户组织，试验各种不同的环境和工具。是否在某个项目中使用新技术或是否放入简历并不重要，学习的过程将扩展你的思维，当然，如果可能，尽量用到你的项目中去。

读一读开发团队内部交流的书。

用纯文本保存知识！
学习、利用shell，学习一种文本操纵语言!
精通一种文本编辑器，Emacs, vi？任何语言的都用同一种编辑器编写，要精通，而不只是了解基本特性。
编写能编写代码的代码，代码生成器。

===== 方法 =====
承诺某项工作前，要明白你不一定能直接控制事情的每一方面，要评估在尽你所能时，风险是否仍超出你的控制，如果风险太大，你有权不去负责。如果你确实同意，就应切实负起责任，对可能的风险预先制定应急计划。当犯错误时，承认它，并设法给出可以选择的解决方案，而不是去责怪供应商、编程语言、管理部门、或你的同事。如果需要额外的资源，不要害怕提出要求。
-- 充分评估、应急计划、不找借口、提供方案、索取资源。

“破窗户”理论。选择两或三扇“破窗户”，并与你的同事讨论问题何在，以及怎样修理它们。
团队作为一个整体，不应该容忍破窗户，鼓励那些还不了解这种哲学的人。

石头汤的故事。先开始做事，并给大家看，然后提出设想和要求。对人们来说，参与正在发生的成功要更容易，让他们瞥见未来，你就能让他们聚焦在你周围。

温水青蛙告诉我们，要关注大图景，要持续不断地观察周围发生的事，而不只是你自己在做的事。

了解听众的离合诗：
你想让他们学到什么？
他们对你讲的什么感兴趣？
他们有多富有经验？
他们想要多少细节？
你想要让认证拥有这些信息？
你如何促使他们听你说话？

交流风格依对方而定，但如果对方要你用一段话进行描述，你觉得不用几页纸无法做到，就如实告诉对方，这样的反馈也是交流的一种形式。

DRY原则：Don't repeat yourself.　代码中不该有重复的知识。
低级知识放在代码中，高级知识放在注释中，而不要重复。当修改代码时，不一定非要修改注释。
一般而言，注释应该讨论为何要做某事，它的目的和目标。代码已经说明了它是怎样完成的，所以再加到注释中是多余的。

原型制作：用户界面原型，代码只让界面响应用户操作，用户同意后就可扔掉。
曳[yè]光代码：给出一个架构骨架，简化的功能，可以向用户演示实际交互工作，开发者可在其上增加代码。将来的系统将会继续按照这次的曳光代码的方式工作。
原型制作可视为在第一次曳光弹发射之前进行的侦察和情报搜集工作。
为了学习经验而制作原型。

BNF 巴科斯范式：
在双引号中的字("word")代表着这些字符本身。而double_quote用来代表双引号。
在双引号外的字（有可能有下划线）代表着语法部分。
尖括号( < > )内包含的为必选项。
方括号( [ ] )内包含的为可选项。
大括号( { } )内包含的为可重复0至无数次的项。
竖线( | )表示在其左右两边任选一项，相当于"OR"的意思。
::= 是“被定义为”的意思。

估算单位：1-15天->天，3-8周->周，8-30周->月。
四分之三秒与750毫秒给我以不同的精确感。
写估算日志，追踪估算能力，一段时间后回头看估算是否正确，如果错了，找出事情为何与猜想不同。
在被要求进行估算时说什么？“我等会儿回答你。”

是异常还是应该正常的错误检查？异常是事情应该是这样，而出现了意外。如果你本来就不确信，那应该是检查错误。

元数据：描述数据的数据。
将抽象放进代码，细节放进元数据。
元数据以纯文本方式配置，程序启动时加载元数据，并设计一种方式，在服务运行中重新读取并应用元数据。

不要假定，要证明。如果假定后，努力证明。

常见的O()表示法：
O(1)：常量型（访问数组元素，简单语句）
O(lg(n))：对数型（二分查找），lg(n)表示法是log2(n)的简写形式。每次循环都将事物一分为二。
O(n)：线性型（顺序查找），简单循环
O(n*lg(n))：比线性差，但不会差很多（快速排序，堆排序的平均运行时间）。快速排序：把数据划分为两人半，并递归地对每一半进行排序。
O(n平方)：平方律型（选择和插入排序），嵌套循环。
O(n立方)：立方型(2n*n矩阵相乘)
O(Cn次方)：指数型（旅行商问题，集合划分）
O()表示法不仅可用于时间，也可用于其他资源消耗建模。

早重构，常重构。不要试图在重构的同时增加功能。在开始重构之前，尽量确保拥有良好的单元测试或其他自动化测试。

当你设计模块或单个程序时，应该即设计其合约，也设计测试该合约的代码。

使用向导生成一个骨架应用时，查看每行代码，是否真的理解，是否做了不需要的事情。你必须全部理解，否则不要使用向导生成代码。

需求需要做一定抽象，通常用户给出具体有什么要求，你需要抽象成虚求，而把具体的要求与需求分开，存在另外的文档中，用超链接连接起来。需求作为一般陈述，而具体要求、政策信息作为例子给开发者。政策应成为应用中的元数据。
找出用户为何要做特定事情的原因，而不是目前他们的方式，这将为实现需求带来无价的信息。
成为用户：与有经验的支持人员一起接电话；在交易所工作一周。争取与用户一起工作一段时间，像用户一样思考，但不要妨碍他们的工作。
需求不是架构、不是设计、不是用户界面。
管理需求增长的关键是向项目出资人指出每项新特性对项目进度的影响，要完整记录需求增长及何时发生。要预防温水煮青蛙，警惕“只是再增加一个特性”。
维护一个项目词汇表，定义项目中使用的专用术语和词汇，所有参与者都要使用这个词汇表以保持一致。

正方形的四个点，怎样用三条线连接并回到起点？

遇到难题时，考虑一下以下问题：
1. 有更容易的方法吗？
2. 是在设法解决真正的问题，还是被外围的技术问题转移了注意力？
3. 这件事情为什么是一个问题？
4. 是什么使它如此难以解决？
5. 它必须以这种方式完成吗？
6. 它真的必须完成吗？

搜集需求、编写规范、编码，这些步骤都是孤立进行的。健康的开发过程鼓励把来自实现与测试的意见反馈到规范中。你也需要自己编码，有时用编码来说明规范更容易。

使项目级活动保持一致和可靠的一个最重要的因素是使你的各种工作流程自动化。

在你的作品上签名，预防匿名的危险。
